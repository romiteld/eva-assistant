name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    uses: ./.github/workflows/test.yml
    secrets: inherit

  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_GEMINI_API_KEY: ${{ secrets.STAGING_GEMINI_API_KEY }}

    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        alias-domains: eva-staging.vercel.app

    - name: Deploy Supabase Edge Functions
      run: |
        npm install -g supabase
        supabase functions deploy --project-ref ${{ secrets.STAGING_SUPABASE_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    - name: Run smoke tests
      working-directory: ./frontend
      run: |
        npm run test:e2e -- --grep "@smoke"
      env:
        PLAYWRIGHT_BASE_URL: https://eva-staging.vercel.app

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_GEMINI_API_KEY: ${{ secrets.PROD_GEMINI_API_KEY }}

    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

    - name: Deploy Supabase Edge Functions
      run: |
        npm install -g supabase
        supabase functions deploy --project-ref ${{ secrets.PROD_SUPABASE_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Production deployment of EVA Assistant
          
          ## Changes
          - Commit: ${{ github.sha }}
          - Deployed by: ${{ github.actor }}
        draft: false
        prerelease: false

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'EVA Assistant deployed to production!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()