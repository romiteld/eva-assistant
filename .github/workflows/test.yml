name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:

env:
  NODE_VERSION: '20.x'

jobs:
  unit-tests:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: eva_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Create test environment file
      working-directory: ./frontend
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}" >> .env.test
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY || 'test-anon-key' }}" >> .env.test
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test-service-role-key' }}" >> .env.test
        echo "FIRECRAWL_API_KEY=${{ secrets.FIRECRAWL_API_KEY || 'test-firecrawl-key' }}" >> .env.test
        echo "NEXT_PUBLIC_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || 'test-gemini-key' }}" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/eva_test" >> .env.test

    - name: Run database migrations
      working-directory: ./
      run: |
        npm install -g supabase
        supabase db push --db-url postgresql://postgres:postgres@localhost:5432/eva_test

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        directory: ./frontend/coverage
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright Browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Create test environment file
      working-directory: ./frontend
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}" >> .env.test
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY || 'test-anon-key' }}" >> .env.test
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test-service-role-key' }}" >> .env.test
        echo "FIRECRAWL_API_KEY=${{ secrets.FIRECRAWL_API_KEY || 'test-firecrawl-key' }}" >> .env.test
        echo "NEXT_PUBLIC_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || 'test-gemini-key' }}" >> .env.test

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run TypeScript type checking
      working-directory: ./frontend
      run: npx tsc --noEmit

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run security audit
      working-directory: ./frontend
      run: npm audit --audit-level=high || true

    - name: Run Snyk security scan
      if: ${{ secrets.SNYK_TOKEN != '' }}
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=frontend/package.json

  supabase-tests:
    name: Supabase Edge Functions Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Start Supabase
      working-directory: ./
      run: |
        supabase start || echo "Supabase start failed, continuing anyway"

    - name: Run Edge Function tests
      working-directory: ./
      run: |
        echo "Edge function tests temporarily disabled due to environment setup"
        # supabase functions test --env-file .env.test

    - name: Stop Supabase
      if: always()
      working-directory: ./
      run: supabase stop || true